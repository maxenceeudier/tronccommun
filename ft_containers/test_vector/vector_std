/*==========================*/
/*         VECTOR           */
/*==========================*/
Mon Nov 21 17:36:19 2022
/*==========================*/
/*       BASICS FUNCT       */
/*==========================*/


vec():
[empty]


push some value
[ 10, -67, 3 ]

cpy() and = construct
[ 10, -67, 3 ]

cpy(size, value)
[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]

cpy(first, last)
[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]


assign(size, val)
[ 4, 4, 4 ]


assign(first, last)
[ 10, -67 ]


test get alloc:
3
/*==========================*/
/*       ACCESS ELEMTS      */
/*==========================*/

at():
3

at() const :
3

front():
10

front() const :
10

back():
3

back() const :
3

test data(): myvector contains: 10 20 0 100 0


test vec[1] = 2
[ 10, -67, 3 ]
[ 10, 2, 3 ]


/*==========================*/
/*         CAPACITY         */
/*==========================*/


test empty()

[ 10, -67 ]
 empty() : 0
size() : 2
capacity() : 10

vec4.insetr some value
[ 10, -67, 10, 2, 3, 10, 2, 3, 10, -67, 10, 2, 3, 10, 2, 3 ]
 empty() : 0
size() : 16
capacity() : 20

vec4.clear()
[empty]
 
empty() : 1
size() : 0
capacity() : 20
max_size() : 4611686018427387903

/*==========================*/
/*        ITERATORS         */
/*==========================*/


begin(), end()
[ 10 2 3  ]

rbegin(), rend()
[ 3 2 10  ]

cbegin(), cend()
[ 10 2 3  ]

crbegin(), crend()
[ 3 2 10  ]

/*==========================*/
/*        OPERATORS         */
/*==========================*/
operators:
test9 < test10:   0
test9 > test10:   1
test9 <= test10:  0
test9 >= test10:  1
test9 == test10:  0
test9 != test10:  1


test11(test10); test11.resize(test11.size() + 1):
test11 < test10:  0
test11 > test10:  1
test11 <= test10: 0
test11 >= test10: 1
test11 == test10: 0
test11 != test10: 1
[ ya, ya, ya, ya, ya, ya, ya, ya, ya, ya, , , , ,  ]
[ ya, ya, ya, ya, ya, ya, ya, ya, ya, ya ]


/*==========================*/
/*         MODIFIERS        */
/*==========================*/
 -------------------------------- 
| test push and pop and capacity |
| default constructor            |
 -------------------------------- 

test1():
      -test1:            [empty]
      -test1.capacity:   0

test1.push_back() 2 and 6:
      -test1:            [ 2, 6 ]
      -test1.capacity:   2

test1.pop():
      -test1:            [ 2 ]
      -test1.capacity:   2

test1.push_back() 10, -67, 3:
      -test1:            [ 2, 10, -67, 3 ]
      -test1.capacity:   4

size x test1.pop():
      -test1:            [empty]
      -test1.capacity:   4

 ----------------------------- 
| test push, pop and capacity |
| constructor(size_t, value)  |
 ----------------------------- 

test2(5, 100):
      -test2:             [ 100, 100, 100, 100, 100 ]
      -test2.capacity:    5

test2.push_back 1, 2, 3:
      -test2:             [ 100, 100, 100, 100, 100, 1, 2, 3 ]
      -test2.capacity:    10

 -------------------------- 
| constructor(first, last) |
| constructor(cpy)         |
| assignement operator     |
 -------------------------- 

test3(test2.begin(), test2.end()):
      -test3:     [ 100, 100, 100, 100, 100, 1, 2, 3 ]

test4(test3):
      -test4:         [ 100, 100, 100, 100, 100, 1, 2, 3 ]

test5 = test4:
      -test5:         [ 100, 100, 100, 100, 100, 1, 2, 3 ]
      -test5capacity: 8

test5.pop_back(), test5.push_back() 9, 10, 11:
      -test5:         [ 100, 100, 100, 100, 100, 1, 2, 9, 10, 11 ]
      -test5capacity: 16

 -------------------------- 
| insert(pos, first, last) |
| insert(pos, value)       |
| insert(pos, n, value)    |
| iterators                |
 -------------------------- 

test6(5, 6); test5.insert(test5.begin() + 4, test6.begin() + 3, test6.end()):
      -test5:         [ 100, 100, 100, 100, 6, 6, 100, 1, 2, 9, 10, 11 ]
      -test5capacity: 16

test7(5, 8):
      -test7:         [ 8, 8, 8, 8, 8 ]
test8(5, 3), test8.push_back(2):
      -test8:         [ 3, 3, 3, 3, 3, 2 ]

test7.insert(test7.begin() + 2, test8.begin(), test8.end() - 2):
      -test7:             [ 8, 8, 3, 3, 3, 3, 8, 8, 8 ]
      -test7.capacity:    10

test7.insert(test7.begin() + 3, 999):
      -test7:             [ 8, 8, 3, 999, 3, 3, 3, 8, 8, 8 ]
      -test7.capacity:    10

test8.insert(test8.begin() + 2, 3, 100):
      -test8:             [ 3, 3, 3, 3, 100, 100, 100, 3, 2 ]
      -test8.capacity:    10

[ 100, 100, 100, 100, 6, 6, 100, 1, 2, 9, 10, 11 ]
16
test5:
      -test5:             [ 100, 100, 100, 100, 6, 6, 100, 1, 2, 9, 10, 11 ]
      -test5.capacity:    16

test5.insert(test5.end() - 2, test5.rbegin(), test5.rend() - 1):
      -test5:             [ 100, 100, 100, 100, 6, 6, 100, 1, 2, 9, 11, 10, 9, 2, 1, 100, 6, 6, 100, 100, 100, 10, 11 ]
      -test5.capacity:    32

 -------------------------- 
| max_size                 |
| erase                    |
| resize                   |
 -------------------------- 

test5.max_size():
      -test5.max_size():  4611686018427387903

test7; test7.erase(test7.begin() + 2, test7.end() - 3) and rslt:
      -test7:     [ 8, 8, 3, 999, 3, 3, 3, 8, 8, 8 ]
      -test7:     [ 8, 8, 8, 8, 8 ]
      -rslt:      8

test7.resize(3); test7.resize(10):
      -test7:             [ 8, 8, 8, 0, 0, 0, 0, 0, 0, 0 ]
      -test7.capacity:    10

 ----------------- 
| swap            |
 ----------------- 

      test12 : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
      test13 : [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
swap:
      test12 : [ 100, 100, 100, 100, 100, 1, 2, 3 ]
      test13 : [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]


/*==========================*/
/*         perfo            */
/*==========================*/
Mon Nov 21 17:36:20 2022


the programme took: 1s
